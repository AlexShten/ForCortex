
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a0  080003a8  000103a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a0  080003a0  000103a8  2**0
                  CONTENTS
  4 .ARM          00000000  080003a0  080003a0  000103a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a0  080003a8  000103a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a0  080003a0  000103a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003a4  080003a4  000103a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103a8  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000941  00000000  00000000  000103d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000022c  00000000  00000000  00010d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  00010f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000048  00000000  00000000  00010fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181e8  00000000  00000000  00011000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000969  00000000  00000000  000291e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087c28  00000000  00000000  00029b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000b1779  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000ac  00000000  00000000  000b17cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000388 	.word	0x08000388

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000388 	.word	0x08000388

080001c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001cc:	4b06      	ldr	r3, [pc, #24]	; (80001e8 <SystemInit+0x20>)
 80001ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001d2:	4a05      	ldr	r2, [pc, #20]	; (80001e8 <SystemInit+0x20>)
 80001d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001dc:	bf00      	nop
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	e000ed00 	.word	0xe000ed00

080001ec <main>:

char flag = 0;
uint32_t counter = 0;


int main(void){
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0

		//	enable PORTA, PORTD bus
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80001f0:	4b38      	ldr	r3, [pc, #224]	; (80002d4 <main+0xe8>)
 80001f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f4:	4a37      	ldr	r2, [pc, #220]	; (80002d4 <main+0xe8>)
 80001f6:	f043 0308 	orr.w	r3, r3, #8
 80001fa:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001fc:	4b35      	ldr	r3, [pc, #212]	; (80002d4 <main+0xe8>)
 80001fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000200:	4a34      	ldr	r2, [pc, #208]	; (80002d4 <main+0xe8>)
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6313      	str	r3, [r2, #48]	; 0x30

		//	PORTD15
		//	MODER15[1:0] = 01 - General purpose output mode
		GPIOD->MODER &= ~GPIO_MODER_MODER15;
 8000208:	4b33      	ldr	r3, [pc, #204]	; (80002d8 <main+0xec>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a32      	ldr	r2, [pc, #200]	; (80002d8 <main+0xec>)
 800020e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000212:	6013      	str	r3, [r2, #0]
		GPIOD->MODER |= GPIO_MODER_MODER15_0;
 8000214:	4b30      	ldr	r3, [pc, #192]	; (80002d8 <main+0xec>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a2f      	ldr	r2, [pc, #188]	; (80002d8 <main+0xec>)
 800021a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800021e:	6013      	str	r3, [r2, #0]

		//	PORTA0
		//	MODER0[1:0] = 00 - General purpose input mode
		GPIOA->MODER &= ~GPIO_MODER_MODER0;
 8000220:	4b2e      	ldr	r3, [pc, #184]	; (80002dc <main+0xf0>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a2d      	ldr	r2, [pc, #180]	; (80002dc <main+0xf0>)
 8000226:	f023 0303 	bic.w	r3, r3, #3
 800022a:	6013      	str	r3, [r2, #0]

		//	OTYPER15 = 0 - Output push-pull
		GPIOD->OTYPER &= ~GPIO_OTYPER_OT_15;
 800022c:	4b2a      	ldr	r3, [pc, #168]	; (80002d8 <main+0xec>)
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	4a29      	ldr	r2, [pc, #164]	; (80002d8 <main+0xec>)
 8000232:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000236:	6053      	str	r3, [r2, #4]

		//	OSPEEDR15[1:0] = 00 - Low speed
		GPIOD->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED15;
 8000238:	4b27      	ldr	r3, [pc, #156]	; (80002d8 <main+0xec>)
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	4a26      	ldr	r2, [pc, #152]	; (80002d8 <main+0xec>)
 800023e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000242:	6093      	str	r3, [r2, #8]

		//	PUPDR15[1:0] = 00 - No pull-up, pull-down
		GPIOD->PUPDR &= ~GPIO_PUPDR_PUPDR15;
 8000244:	4b24      	ldr	r3, [pc, #144]	; (80002d8 <main+0xec>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	4a23      	ldr	r2, [pc, #140]	; (80002d8 <main+0xec>)
 800024a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800024e:	60d3      	str	r3, [r2, #12]

		//	PUPDR0[1:0] = 00 - Floating
		GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR0;
 8000250:	4b22      	ldr	r3, [pc, #136]	; (80002dc <main+0xf0>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	4a21      	ldr	r2, [pc, #132]	; (80002dc <main+0xf0>)
 8000256:	f023 0303 	bic.w	r3, r3, #3
 800025a:	60d3      	str	r3, [r2, #12]

		//	BSRR6 = 1 - clear bit
		GPIOD->BSRR |= GPIO_BSRR_BR15;
 800025c:	4b1e      	ldr	r3, [pc, #120]	; (80002d8 <main+0xec>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a1d      	ldr	r2, [pc, #116]	; (80002d8 <main+0xec>)
 8000262:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000266:	6193      	str	r3, [r2, #24]


		while(1){
				while(counter < 300000) counter++;
 8000268:	e004      	b.n	8000274 <main+0x88>
 800026a:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <main+0xf4>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	3301      	adds	r3, #1
 8000270:	4a1b      	ldr	r2, [pc, #108]	; (80002e0 <main+0xf4>)
 8000272:	6013      	str	r3, [r2, #0]
 8000274:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <main+0xf4>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a1a      	ldr	r2, [pc, #104]	; (80002e4 <main+0xf8>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d9f5      	bls.n	800026a <main+0x7e>

				counter = 0;
 800027e:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <main+0xf4>)
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
				flag++;
 8000284:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <main+0xfc>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	3301      	adds	r3, #1
 800028a:	b2da      	uxtb	r2, r3
 800028c:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <main+0xfc>)
 800028e:	701a      	strb	r2, [r3, #0]

				if((GPIOA->IDR & GPIO_IDR_IDR_0) == 0){
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <main+0xf0>)
 8000292:	691b      	ldr	r3, [r3, #16]
 8000294:	f003 0301 	and.w	r3, r3, #1
 8000298:	2b00      	cmp	r3, #0
 800029a:	d114      	bne.n	80002c6 <main+0xda>
						if(flag % 2 == 0) GPIOD->BSRR |= GPIO_BSRR_BS15;
 800029c:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <main+0xfc>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	f003 0301 	and.w	r3, r3, #1
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d106      	bne.n	80002b8 <main+0xcc>
 80002aa:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <main+0xec>)
 80002ac:	699b      	ldr	r3, [r3, #24]
 80002ae:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <main+0xec>)
 80002b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002b4:	6193      	str	r3, [r2, #24]
 80002b6:	e7dd      	b.n	8000274 <main+0x88>
						else GPIOD->BSRR |= GPIO_BSRR_BR15;
 80002b8:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <main+0xec>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a06      	ldr	r2, [pc, #24]	; (80002d8 <main+0xec>)
 80002be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	e7d6      	b.n	8000274 <main+0x88>
				}
				else GPIOD->BSRR |= GPIO_BSRR_BR15;
 80002c6:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <main+0xec>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <main+0xec>)
 80002cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80002d0:	6193      	str	r3, [r2, #24]
				while(counter < 300000) counter++;
 80002d2:	e7cf      	b.n	8000274 <main+0x88>
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020c00 	.word	0x40020c00
 80002dc:	40020000 	.word	0x40020000
 80002e0:	20000020 	.word	0x20000020
 80002e4:	000493df 	.word	0x000493df
 80002e8:	2000001c 	.word	0x2000001c

080002ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80002ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000324 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002f0:	480d      	ldr	r0, [pc, #52]	; (8000328 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002f2:	490e      	ldr	r1, [pc, #56]	; (800032c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80002f4:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f8:	e002      	b.n	8000300 <LoopCopyDataInit>

080002fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fe:	3304      	adds	r3, #4

08000300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000304:	d3f9      	bcc.n	80002fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000306:	4a0b      	ldr	r2, [pc, #44]	; (8000334 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000308:	4c0b      	ldr	r4, [pc, #44]	; (8000338 <LoopFillZerobss+0x26>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800030c:	e001      	b.n	8000312 <LoopFillZerobss>

0800030e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000310:	3204      	adds	r2, #4

08000312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000314:	d3fb      	bcc.n	800030e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000316:	f7ff ff57 	bl	80001c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800031a:	f000 f811 	bl	8000340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800031e:	f7ff ff65 	bl	80001ec <main>
  bx  lr    
 8000322:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800032c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000330:	080003a8 	.word	0x080003a8
  ldr r2, =_sbss
 8000334:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000338:	20000024 	.word	0x20000024

0800033c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800033c:	e7fe      	b.n	800033c <ADC_IRQHandler>
	...

08000340 <__libc_init_array>:
 8000340:	b570      	push	{r4, r5, r6, lr}
 8000342:	4d0d      	ldr	r5, [pc, #52]	; (8000378 <__libc_init_array+0x38>)
 8000344:	4c0d      	ldr	r4, [pc, #52]	; (800037c <__libc_init_array+0x3c>)
 8000346:	1b64      	subs	r4, r4, r5
 8000348:	10a4      	asrs	r4, r4, #2
 800034a:	2600      	movs	r6, #0
 800034c:	42a6      	cmp	r6, r4
 800034e:	d109      	bne.n	8000364 <__libc_init_array+0x24>
 8000350:	4d0b      	ldr	r5, [pc, #44]	; (8000380 <__libc_init_array+0x40>)
 8000352:	4c0c      	ldr	r4, [pc, #48]	; (8000384 <__libc_init_array+0x44>)
 8000354:	f000 f818 	bl	8000388 <_init>
 8000358:	1b64      	subs	r4, r4, r5
 800035a:	10a4      	asrs	r4, r4, #2
 800035c:	2600      	movs	r6, #0
 800035e:	42a6      	cmp	r6, r4
 8000360:	d105      	bne.n	800036e <__libc_init_array+0x2e>
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f855 3b04 	ldr.w	r3, [r5], #4
 8000368:	4798      	blx	r3
 800036a:	3601      	adds	r6, #1
 800036c:	e7ee      	b.n	800034c <__libc_init_array+0xc>
 800036e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000372:	4798      	blx	r3
 8000374:	3601      	adds	r6, #1
 8000376:	e7f2      	b.n	800035e <__libc_init_array+0x1e>
 8000378:	080003a0 	.word	0x080003a0
 800037c:	080003a0 	.word	0x080003a0
 8000380:	080003a0 	.word	0x080003a0
 8000384:	080003a4 	.word	0x080003a4

08000388 <_init>:
 8000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038a:	bf00      	nop
 800038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038e:	bc08      	pop	{r3}
 8000390:	469e      	mov	lr, r3
 8000392:	4770      	bx	lr

08000394 <_fini>:
 8000394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000396:	bf00      	nop
 8000398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039a:	bc08      	pop	{r3}
 800039c:	469e      	mov	lr, r3
 800039e:	4770      	bx	lr
